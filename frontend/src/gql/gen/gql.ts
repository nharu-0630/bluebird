/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query GetShelfItems {\n  shelfItems {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetShelfItem($ulid: String!) {\n  shelfItem(ulid: $ulid) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetDeletedShelfItems {\n  deletedShelfItems {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetDeletedShelfItem($ulid: String!) {\n  deletedShelfItem(ulid: $ulid) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetShelfCategories {\n  shelfCategories {\n    ulid\n    name\n  }\n}\n\nquery GetShelfTags {\n  shelfTags {\n    ulid\n    name\n  }\n}\n\nquery GetShelfLocations {\n  shelfLocations {\n    ulid\n    name\n  }\n}\n\nmutation CreateShelfItem($name: String!, $categoryUlid: String!, $tagsUlid: [String!]!, $locationUlid: String!, $description: String!) {\n  createShelfItem(\n    name: $name\n    categoryUlid: $categoryUlid\n    tagsUlid: $tagsUlid\n    locationUlid: $locationUlid\n    description: $description\n  ) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n  }\n}\n\nmutation UpdateShelfItem($ulid: String!, $name: String, $categoryUlid: String, $tagsUlid: [String!], $locationUlid: String, $description: String) {\n  updateShelfItem(\n    ulid: $ulid\n    name: $name\n    categoryUlid: $categoryUlid\n    tagsUlid: $tagsUlid\n    locationUlid: $locationUlid\n    description: $description\n  ) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n  }\n}\n\nmutation DeleteShelfItem($ulid: String!) {\n  deleteShelfItem(ulid: $ulid)\n}\n\nmutation RestoreShelfItem($ulid: String!) {\n  restoreShelfItem(ulid: $ulid)\n}\n\nmutation ForceDeleteShelfItem($ulid: String!) {\n  forceDeleteShelfItem(ulid: $ulid)\n}\n\nmutation CreateShelfCategory($name: String!) {\n  createShelfCategory(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfCategory($ulid: String!, $name: String) {\n  updateShelfCategory(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfCategory($ulid: String!) {\n  deleteShelfCategory(ulid: $ulid)\n}\n\nmutation CreateShelfTag($name: String!) {\n  createShelfTag(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfTag($ulid: String!, $name: String) {\n  updateShelfTag(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfTag($ulid: String!) {\n  deleteShelfTag(ulid: $ulid)\n}\n\nmutation CreateShelfLocation($name: String!) {\n  createShelfLocation(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfLocation($ulid: String!, $name: String) {\n  updateShelfLocation(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfLocation($ulid: String!) {\n  deleteShelfLocation(ulid: $ulid)\n}": types.GetShelfItemsDocument,
    "query GetTwitterUser($screenName: String!) {\n  twitterUser(screenName: $screenName) {\n    id\n    name\n    screenName\n    verified\n    blueVerified\n    description\n    location\n    birthday\n    createdAt\n    friendsCount\n    following\n    fastFollowersCount\n    followersCount\n    normalFollowersCount\n    followedBy\n    mediaCount\n    favouritesCount\n    listedCount\n    pinnedTweetIDs\n    profileBannerURL\n    profileImageURL\n    statusesCount\n  }\n}\n\nquery GetTwitterTweets($userID: String!, $cursor: String) {\n  twitterTweets(userID: $userID, cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}\n\nquery GetTwitterLikes($userID: String!, $cursor: String) {\n  twitterLikes(userID: $userID, cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}\n\nquery GetTwitterBookmarks($cursor: String) {\n  twitterBookmarks(cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}": types.GetTwitterUserDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetShelfItems {\n  shelfItems {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetShelfItem($ulid: String!) {\n  shelfItem(ulid: $ulid) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetDeletedShelfItems {\n  deletedShelfItems {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetDeletedShelfItem($ulid: String!) {\n  deletedShelfItem(ulid: $ulid) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetShelfCategories {\n  shelfCategories {\n    ulid\n    name\n  }\n}\n\nquery GetShelfTags {\n  shelfTags {\n    ulid\n    name\n  }\n}\n\nquery GetShelfLocations {\n  shelfLocations {\n    ulid\n    name\n  }\n}\n\nmutation CreateShelfItem($name: String!, $categoryUlid: String!, $tagsUlid: [String!]!, $locationUlid: String!, $description: String!) {\n  createShelfItem(\n    name: $name\n    categoryUlid: $categoryUlid\n    tagsUlid: $tagsUlid\n    locationUlid: $locationUlid\n    description: $description\n  ) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n  }\n}\n\nmutation UpdateShelfItem($ulid: String!, $name: String, $categoryUlid: String, $tagsUlid: [String!], $locationUlid: String, $description: String) {\n  updateShelfItem(\n    ulid: $ulid\n    name: $name\n    categoryUlid: $categoryUlid\n    tagsUlid: $tagsUlid\n    locationUlid: $locationUlid\n    description: $description\n  ) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n  }\n}\n\nmutation DeleteShelfItem($ulid: String!) {\n  deleteShelfItem(ulid: $ulid)\n}\n\nmutation RestoreShelfItem($ulid: String!) {\n  restoreShelfItem(ulid: $ulid)\n}\n\nmutation ForceDeleteShelfItem($ulid: String!) {\n  forceDeleteShelfItem(ulid: $ulid)\n}\n\nmutation CreateShelfCategory($name: String!) {\n  createShelfCategory(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfCategory($ulid: String!, $name: String) {\n  updateShelfCategory(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfCategory($ulid: String!) {\n  deleteShelfCategory(ulid: $ulid)\n}\n\nmutation CreateShelfTag($name: String!) {\n  createShelfTag(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfTag($ulid: String!, $name: String) {\n  updateShelfTag(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfTag($ulid: String!) {\n  deleteShelfTag(ulid: $ulid)\n}\n\nmutation CreateShelfLocation($name: String!) {\n  createShelfLocation(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfLocation($ulid: String!, $name: String) {\n  updateShelfLocation(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfLocation($ulid: String!) {\n  deleteShelfLocation(ulid: $ulid)\n}"): (typeof documents)["query GetShelfItems {\n  shelfItems {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetShelfItem($ulid: String!) {\n  shelfItem(ulid: $ulid) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetDeletedShelfItems {\n  deletedShelfItems {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetDeletedShelfItem($ulid: String!) {\n  deletedShelfItem(ulid: $ulid) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n    images {\n      baseUri\n      token\n    }\n  }\n}\n\nquery GetShelfCategories {\n  shelfCategories {\n    ulid\n    name\n  }\n}\n\nquery GetShelfTags {\n  shelfTags {\n    ulid\n    name\n  }\n}\n\nquery GetShelfLocations {\n  shelfLocations {\n    ulid\n    name\n  }\n}\n\nmutation CreateShelfItem($name: String!, $categoryUlid: String!, $tagsUlid: [String!]!, $locationUlid: String!, $description: String!) {\n  createShelfItem(\n    name: $name\n    categoryUlid: $categoryUlid\n    tagsUlid: $tagsUlid\n    locationUlid: $locationUlid\n    description: $description\n  ) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n  }\n}\n\nmutation UpdateShelfItem($ulid: String!, $name: String, $categoryUlid: String, $tagsUlid: [String!], $locationUlid: String, $description: String) {\n  updateShelfItem(\n    ulid: $ulid\n    name: $name\n    categoryUlid: $categoryUlid\n    tagsUlid: $tagsUlid\n    locationUlid: $locationUlid\n    description: $description\n  ) {\n    ulid\n    name\n    category {\n      ulid\n      name\n    }\n    tags {\n      ulid\n      name\n    }\n    location {\n      ulid\n      name\n    }\n    description\n  }\n}\n\nmutation DeleteShelfItem($ulid: String!) {\n  deleteShelfItem(ulid: $ulid)\n}\n\nmutation RestoreShelfItem($ulid: String!) {\n  restoreShelfItem(ulid: $ulid)\n}\n\nmutation ForceDeleteShelfItem($ulid: String!) {\n  forceDeleteShelfItem(ulid: $ulid)\n}\n\nmutation CreateShelfCategory($name: String!) {\n  createShelfCategory(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfCategory($ulid: String!, $name: String) {\n  updateShelfCategory(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfCategory($ulid: String!) {\n  deleteShelfCategory(ulid: $ulid)\n}\n\nmutation CreateShelfTag($name: String!) {\n  createShelfTag(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfTag($ulid: String!, $name: String) {\n  updateShelfTag(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfTag($ulid: String!) {\n  deleteShelfTag(ulid: $ulid)\n}\n\nmutation CreateShelfLocation($name: String!) {\n  createShelfLocation(name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation UpdateShelfLocation($ulid: String!, $name: String) {\n  updateShelfLocation(ulid: $ulid, name: $name) {\n    ulid\n    name\n  }\n}\n\nmutation DeleteShelfLocation($ulid: String!) {\n  deleteShelfLocation(ulid: $ulid)\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetTwitterUser($screenName: String!) {\n  twitterUser(screenName: $screenName) {\n    id\n    name\n    screenName\n    verified\n    blueVerified\n    description\n    location\n    birthday\n    createdAt\n    friendsCount\n    following\n    fastFollowersCount\n    followersCount\n    normalFollowersCount\n    followedBy\n    mediaCount\n    favouritesCount\n    listedCount\n    pinnedTweetIDs\n    profileBannerURL\n    profileImageURL\n    statusesCount\n  }\n}\n\nquery GetTwitterTweets($userID: String!, $cursor: String) {\n  twitterTweets(userID: $userID, cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}\n\nquery GetTwitterLikes($userID: String!, $cursor: String) {\n  twitterLikes(userID: $userID, cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}\n\nquery GetTwitterBookmarks($cursor: String) {\n  twitterBookmarks(cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}"): (typeof documents)["query GetTwitterUser($screenName: String!) {\n  twitterUser(screenName: $screenName) {\n    id\n    name\n    screenName\n    verified\n    blueVerified\n    description\n    location\n    birthday\n    createdAt\n    friendsCount\n    following\n    fastFollowersCount\n    followersCount\n    normalFollowersCount\n    followedBy\n    mediaCount\n    favouritesCount\n    listedCount\n    pinnedTweetIDs\n    profileBannerURL\n    profileImageURL\n    statusesCount\n  }\n}\n\nquery GetTwitterTweets($userID: String!, $cursor: String) {\n  twitterTweets(userID: $userID, cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}\n\nquery GetTwitterLikes($userID: String!, $cursor: String) {\n  twitterLikes(userID: $userID, cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}\n\nquery GetTwitterBookmarks($cursor: String) {\n  twitterBookmarks(cursor: $cursor) {\n    cursor\n    tweets {\n      id\n      fullText\n      createdAt\n      replyCount\n      retweetCount\n      quoteCount\n      retweeted\n      favoriteCount\n      favorited\n      bookmarkCount\n      bookmarked\n      lang\n      user {\n        id\n        name\n        screenName\n        verified\n        blueVerified\n        description\n        location\n        birthday\n        createdAt\n        friendsCount\n        following\n        fastFollowersCount\n        followersCount\n        normalFollowersCount\n        followedBy\n        mediaCount\n        favouritesCount\n        listedCount\n        pinnedTweetIDs\n        profileBannerURL\n        profileImageURL\n        statusesCount\n      }\n      media {\n        id\n        mediaKey\n        expandedURL\n        type\n        thumbURL\n        videoURL\n      }\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;