package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
)

// Tweet is the resolver for the tweet field.
func (r *queryResolver) Tweet(ctx context.Context, tweetID string) (*TwitterTweet, error) {
	tweet, err := r.TwitterClient.TweetResultByRestId(tweetID)
	if err != nil {
		return nil, err
	}
	return PressTweet(tweet)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, screenName string) (*TwitterUser, error) {
	user, err := r.TwitterClient.UserByScreenName(screenName)
	if err != nil {
		return nil, err
	}
	return ParseUser(user)
}

// Likes is the resolver for the likes field.
func (r *queryResolver) Likes(ctx context.Context, userID string) ([]*TwitterTweet, error) {
	tweets, _, err := r.TwitterClient.Likes(userID)
	if err != nil {
		return nil, err
	}
	return ParseTweets(tweets)
}

// UserTweets is the resolver for the user_tweets field.
func (r *queryResolver) UserTweets(ctx context.Context, userID string) ([]*TwitterTweet, error) {
	tweets, _, err := r.TwitterClient.UserTweets(userID)
	if err != nil {
		return nil, err
	}
	return ParseTweets(tweets)
}

// Bookmarks is the resolver for the bookmarks field.
func (r *queryResolver) Bookmarks(ctx context.Context) ([]*TwitterTweet, error) {
	tweets, _, err := r.TwitterClient.Bookmarks()
	if err != nil {
		return nil, err
	}
	return ParseTweets(tweets)
}
