package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
)

// TwitterTweet is the resolver for the twitterTweet field.
func (r *queryResolver) TwitterTweet(ctx context.Context, tweetID string) (*TwitterTweet, error) {
	tweet, err := r.TwitterClient.TweetResultByRestId(tweetID)
	if err != nil {
		return nil, err
	}
	return PressTweet(tweet)
}

// TwitterUser is the resolver for the twitterUser field.
func (r *queryResolver) TwitterUser(ctx context.Context, screenName string) (*TwitterUser, error) {
	user, err := r.TwitterClient.UserByScreenName(screenName)
	if err != nil {
		return nil, err
	}
	return ParseUser(user)
}

// TwitterLikes is the resolver for the twitterLikes field.
func (r *queryResolver) TwitterLikes(ctx context.Context, userID string, cursor *string) (*TweetConnection, error) {
	if cursor == nil {
		cursor = new(string)
	}
	tweets, resCursor, err := r.TwitterClient.Likes(userID, *cursor)
	if err != nil {
		return nil, err
	}
	parsedTweets, err := ParseTweets(tweets)
	if err != nil {
		return nil, err
	}
	return &TweetConnection{
		Tweets: parsedTweets,
		Cursor: &resCursor.BottomCursor,
	}, nil
}

// TwitterUserTweets is the resolver for the twitterUserTweets field.
func (r *queryResolver) TwitterUserTweets(ctx context.Context, userID string, cursor *string) (*TweetConnection, error) {
	if cursor == nil {
		cursor = new(string)
	}
	tweets, resCursor, err := r.TwitterClient.UserTweets(userID, *cursor)
	if err != nil {
		return nil, err
	}
	parsedTweets, err := ParseTweets(tweets)
	if err != nil {
		return nil, err
	}
	return &TweetConnection{
		Tweets: parsedTweets,
		Cursor: &resCursor.BottomCursor,
	}, nil
}

// TwitterBookmarks is the resolver for the twitterBookmarks field.
func (r *queryResolver) TwitterBookmarks(ctx context.Context, cursor *string) (*TweetConnection, error) {
	if cursor == nil {
		cursor = new(string)
	}
	tweets, resCursor, err := r.TwitterClient.Bookmarks(*cursor)
	if err != nil {
		return nil, err
	}
	parsedTweets, err := ParseTweets(tweets)
	if err != nil {
		return nil, err
	}
	return &TweetConnection{
		Tweets: parsedTweets,
		Cursor: &resCursor.BottomCursor,
	}, nil
}
