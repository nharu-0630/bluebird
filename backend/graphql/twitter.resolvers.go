package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"

	"github.com/mitchellh/mapstructure"
	"github.com/nharu-0630/bluebird/api/twitter"
	"github.com/nharu-0630/bluebird/api/twitter/model"
	"github.com/nharu-0630/bluebird/api/twitter/operation"
	"github.com/nharu-0630/bluebird/tools"
)

// TwitterTweet is the resolver for the twitterTweet field.
func (r *queryResolver) TwitterTweet(ctx context.Context, tweetID string) (*TwitterTweet, error) {
	data, err := r.TwitterClient.Execute(operation.TweetByID, map[string]interface{}{"tweetId": tweetID})
	if err != nil {
		return nil, err
	}
	var tweet model.Tweet
	mapstructure.Decode(data, &tweet)
	return FormatTweet(&tweet)
}

// TwitterUser is the resolver for the twitterUser field.
func (r *queryResolver) TwitterUser(ctx context.Context, screenName string) (*TwitterUser, error) {
	data, err := r.TwitterClient.Execute(operation.UserByScreenName, map[string]interface{}{"screen_name": screenName})
	if err != nil {
		return nil, err
	}
	var user model.User
	mapstructure.Decode(data, &user)
	return FormatUser(&user)
}

// TwitterLikes is the resolver for the twitterLikes field.
func (r *queryResolver) TwitterLikes(ctx context.Context, userID string, cursor *string) (*TweetConnection, error) {
	if cursor == nil {
		cursor = new(string)
	}
	data, err := r.TwitterClient.Execute(operation.Likes, map[string]interface{}{"userId": userID, "cursor": *cursor})
	if err != nil {
		return nil, err
	}
	tweets, resCursor, err := twitter.InstructionsToTweets(data)
	if err != nil {
		return nil, err
	}
	formattedTweets, err := tools.FormatItems(tweets, FormatTweet)
	if err != nil {
		return nil, err
	}
	return &TweetConnection{
		Tweets: formattedTweets,
		Cursor: &resCursor.BottomCursor,
	}, nil
}

// TwitterUserTweets is the resolver for the twitterUserTweets field.
func (r *queryResolver) TwitterUserTweets(ctx context.Context, userID string, cursor *string) (*TweetConnection, error) {
	if cursor == nil {
		cursor = new(string)
	}
	data, err := r.TwitterClient.Execute(operation.UserTweets, map[string]interface{}{"userId": userID, "cursor": *cursor})
	if err != nil {
		return nil, err
	}
	tweets, resCursor, err := twitter.InstructionsToTweets(data)
	if err != nil {
		return nil, err
	}
	formattedTweets, err := tools.FormatItems(tweets, FormatTweet)
	if err != nil {
		return nil, err
	}
	return &TweetConnection{
		Tweets: formattedTweets,
		Cursor: &resCursor.BottomCursor,
	}, nil
}

// TwitterBookmarks is the resolver for the twitterBookmarks field.
func (r *queryResolver) TwitterBookmarks(ctx context.Context, cursor *string) (*TweetConnection, error) {
	if cursor == nil {
		cursor = new(string)
	}
	data, err := r.TwitterClient.Execute(operation.Bookmarks, map[string]interface{}{"cursor": *cursor})
	if err != nil {
		return nil, err
	}
	tweets, resCursor, err := twitter.InstructionsToTweets(data)
	if err != nil {
		return nil, err
	}
	formattedTweets, err := tools.FormatItems(tweets, FormatTweet)
	if err != nil {
		return nil, err
	}
	return &TweetConnection{
		Tweets: formattedTweets,
		Cursor: &resCursor.BottomCursor,
	}, nil
}
